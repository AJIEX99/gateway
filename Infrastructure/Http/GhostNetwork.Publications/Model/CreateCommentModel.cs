/* 
 * GhostNetwork/Publications API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GhostNetwork.Publications.Client.OpenAPIDateConverter;

namespace GhostNetwork.Publications.Model
{
    /// <summary>
    /// CreateCommentModel
    /// </summary>
    [DataContract]
    public partial class CreateCommentModel :  IEquatable<CreateCommentModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCommentModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateCommentModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCommentModel" /> class.
        /// </summary>
        /// <param name="publicationId">publicationId (required).</param>
        /// <param name="content">content (required).</param>
        /// <param name="replyCommentId">replyCommentId.</param>
        /// <param name="authorId">authorId.</param>
        public CreateCommentModel(string publicationId = default(string), string content = default(string), string replyCommentId = default(string), string authorId = default(string))
        {
            // to ensure "publicationId" is required (not null)
            this.PublicationId = publicationId ?? throw new ArgumentNullException("publicationId is a required property for CreateCommentModel and cannot be null");
            // to ensure "content" is required (not null)
            this.Content = content ?? throw new ArgumentNullException("content is a required property for CreateCommentModel and cannot be null");
            this.ReplyCommentId = replyCommentId;
            this.AuthorId = authorId;
        }
        
        /// <summary>
        /// Gets or Sets PublicationId
        /// </summary>
        [DataMember(Name="publicationId", EmitDefaultValue=false)]
        public string PublicationId { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets ReplyCommentId
        /// </summary>
        [DataMember(Name="replyCommentId", EmitDefaultValue=true)]
        public string ReplyCommentId { get; set; }

        /// <summary>
        /// Gets or Sets AuthorId
        /// </summary>
        [DataMember(Name="authorId", EmitDefaultValue=true)]
        public string AuthorId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateCommentModel {\n");
            sb.Append("  PublicationId: ").Append(PublicationId).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ReplyCommentId: ").Append(ReplyCommentId).Append("\n");
            sb.Append("  AuthorId: ").Append(AuthorId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateCommentModel);
        }

        /// <summary>
        /// Returns true if CreateCommentModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateCommentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCommentModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PublicationId == input.PublicationId ||
                    (this.PublicationId != null &&
                    this.PublicationId.Equals(input.PublicationId))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.ReplyCommentId == input.ReplyCommentId ||
                    (this.ReplyCommentId != null &&
                    this.ReplyCommentId.Equals(input.ReplyCommentId))
                ) && 
                (
                    this.AuthorId == input.AuthorId ||
                    (this.AuthorId != null &&
                    this.AuthorId.Equals(input.AuthorId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PublicationId != null)
                    hashCode = hashCode * 59 + this.PublicationId.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.ReplyCommentId != null)
                    hashCode = hashCode * 59 + this.ReplyCommentId.GetHashCode();
                if (this.AuthorId != null)
                    hashCode = hashCode * 59 + this.AuthorId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
