/* 
 * Reactions
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GhostNetwork.Reactions.Client;
using GhostNetwork.Reactions.Model;

namespace GhostNetwork.Reactions.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReactionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="author"></param>
        /// <returns>Dictionary&lt;string, int&gt;</returns>
        Dictionary<string, int> ReactionsAdd (string key, string type, string author);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="author"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, int&gt;</returns>
        ApiResponse<Dictionary<string, int>> ReactionsAddWithHttpInfo (string key, string type, string author);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="author"></param>
        /// <returns>Dictionary&lt;string, int&gt;</returns>
        Dictionary<string, int> ReactionsDelete (string key, string author);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="author"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, int&gt;</returns>
        ApiResponse<Dictionary<string, int>> ReactionsDeleteWithHttpInfo (string key, string author);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Dictionary&lt;string, int&gt;</returns>
        Dictionary<string, int> ReactionsGet (string key);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, int&gt;</returns>
        ApiResponse<Dictionary<string, int>> ReactionsGetWithHttpInfo (string key);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="author"></param>
        /// <returns>Reaction</returns>
        Reaction ReactionsGetReactionByAuthor (string key, string author);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="author"></param>
        /// <returns>ApiResponse of Reaction</returns>
        ApiResponse<Reaction> ReactionsGetReactionByAuthorWithHttpInfo (string key, string author);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="author"></param>
        /// <returns>Dictionary&lt;string, int&gt;</returns>
        Dictionary<string, int> ReactionsUpdate (string key, string type, string author);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="author"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, int&gt;</returns>
        ApiResponse<Dictionary<string, int>> ReactionsUpdateWithHttpInfo (string key, string type, string author);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReactionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="author"></param>
        /// <returns>Task of Dictionary&lt;string, int&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, int>> ReactionsAddAsync (string key, string type, string author);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="author"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, int&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, int>>> ReactionsAddAsyncWithHttpInfo (string key, string type, string author);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="author"></param>
        /// <returns>Task of Dictionary&lt;string, int&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, int>> ReactionsDeleteAsync (string key, string author);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="author"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, int&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, int>>> ReactionsDeleteAsyncWithHttpInfo (string key, string author);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of Dictionary&lt;string, int&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, int>> ReactionsGetAsync (string key);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, int&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, int>>> ReactionsGetAsyncWithHttpInfo (string key);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="author"></param>
        /// <returns>Task of Reaction</returns>
        System.Threading.Tasks.Task<Reaction> ReactionsGetReactionByAuthorAsync (string key, string author);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="author"></param>
        /// <returns>Task of ApiResponse (Reaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Reaction>> ReactionsGetReactionByAuthorAsyncWithHttpInfo (string key, string author);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="author"></param>
        /// <returns>Task of Dictionary&lt;string, int&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, int>> ReactionsUpdateAsync (string key, string type, string author);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="author"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, int&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, int>>> ReactionsUpdateAsyncWithHttpInfo (string key, string type, string author);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReactionsApi : IReactionsApiSync, IReactionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReactionsApi : IReactionsApi
    {
        private GhostNetwork.Reactions.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReactionsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReactionsApi(String basePath)
        {
            this.Configuration = GhostNetwork.Reactions.Client.Configuration.MergeConfigurations(
                GhostNetwork.Reactions.Client.GlobalConfiguration.Instance,
                new GhostNetwork.Reactions.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GhostNetwork.Reactions.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GhostNetwork.Reactions.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GhostNetwork.Reactions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReactionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReactionsApi(GhostNetwork.Reactions.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GhostNetwork.Reactions.Client.Configuration.MergeConfigurations(
                GhostNetwork.Reactions.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GhostNetwork.Reactions.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GhostNetwork.Reactions.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GhostNetwork.Reactions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReactionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReactionsApi(GhostNetwork.Reactions.Client.ISynchronousClient client,GhostNetwork.Reactions.Client.IAsynchronousClient asyncClient, GhostNetwork.Reactions.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GhostNetwork.Reactions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GhostNetwork.Reactions.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GhostNetwork.Reactions.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GhostNetwork.Reactions.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GhostNetwork.Reactions.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="author"></param>
        /// <returns>Dictionary&lt;string, int&gt;</returns>
        public Dictionary<string, int> ReactionsAdd (string key, string type, string author)
        {
             GhostNetwork.Reactions.Client.ApiResponse<Dictionary<string, int>> localVarResponse = ReactionsAddWithHttpInfo(key, type, author);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="author"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, int&gt;</returns>
        public GhostNetwork.Reactions.Client.ApiResponse< Dictionary<string, int> > ReactionsAddWithHttpInfo (string key, string type, string author)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'key' when calling ReactionsApi->ReactionsAdd");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'type' when calling ReactionsApi->ReactionsAdd");

            // verify the required parameter 'author' is set
            if (author == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'author' when calling ReactionsApi->ReactionsAdd");

            GhostNetwork.Reactions.Client.RequestOptions localVarRequestOptions = new GhostNetwork.Reactions.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GhostNetwork.Reactions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GhostNetwork.Reactions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("author", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(author)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post< Dictionary<string, int> >("/Reactions/{key}/{type}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReactionsAdd", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="author"></param>
        /// <returns>Task of Dictionary&lt;string, int&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, int>> ReactionsAddAsync (string key, string type, string author)
        {
             GhostNetwork.Reactions.Client.ApiResponse<Dictionary<string, int>> localVarResponse = await ReactionsAddAsyncWithHttpInfo(key, type, author);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="author"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, int&gt;)</returns>
        public async System.Threading.Tasks.Task<GhostNetwork.Reactions.Client.ApiResponse<Dictionary<string, int>>> ReactionsAddAsyncWithHttpInfo (string key, string type, string author)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'key' when calling ReactionsApi->ReactionsAdd");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'type' when calling ReactionsApi->ReactionsAdd");

            // verify the required parameter 'author' is set
            if (author == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'author' when calling ReactionsApi->ReactionsAdd");


            GhostNetwork.Reactions.Client.RequestOptions localVarRequestOptions = new GhostNetwork.Reactions.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("author", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(author)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Dictionary<string, int>>("/Reactions/{key}/{type}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReactionsAdd", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="author"></param>
        /// <returns>Dictionary&lt;string, int&gt;</returns>
        public Dictionary<string, int> ReactionsDelete (string key, string author)
        {
             GhostNetwork.Reactions.Client.ApiResponse<Dictionary<string, int>> localVarResponse = ReactionsDeleteWithHttpInfo(key, author);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="author"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, int&gt;</returns>
        public GhostNetwork.Reactions.Client.ApiResponse< Dictionary<string, int> > ReactionsDeleteWithHttpInfo (string key, string author)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'key' when calling ReactionsApi->ReactionsDelete");

            // verify the required parameter 'author' is set
            if (author == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'author' when calling ReactionsApi->ReactionsDelete");

            GhostNetwork.Reactions.Client.RequestOptions localVarRequestOptions = new GhostNetwork.Reactions.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GhostNetwork.Reactions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GhostNetwork.Reactions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("author", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(author)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete< Dictionary<string, int> >("/Reactions/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReactionsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="author"></param>
        /// <returns>Task of Dictionary&lt;string, int&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, int>> ReactionsDeleteAsync (string key, string author)
        {
             GhostNetwork.Reactions.Client.ApiResponse<Dictionary<string, int>> localVarResponse = await ReactionsDeleteAsyncWithHttpInfo(key, author);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="author"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, int&gt;)</returns>
        public async System.Threading.Tasks.Task<GhostNetwork.Reactions.Client.ApiResponse<Dictionary<string, int>>> ReactionsDeleteAsyncWithHttpInfo (string key, string author)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'key' when calling ReactionsApi->ReactionsDelete");

            // verify the required parameter 'author' is set
            if (author == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'author' when calling ReactionsApi->ReactionsDelete");


            GhostNetwork.Reactions.Client.RequestOptions localVarRequestOptions = new GhostNetwork.Reactions.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("author", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(author)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Dictionary<string, int>>("/Reactions/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReactionsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Dictionary&lt;string, int&gt;</returns>
        public Dictionary<string, int> ReactionsGet (string key)
        {
             GhostNetwork.Reactions.Client.ApiResponse<Dictionary<string, int>> localVarResponse = ReactionsGetWithHttpInfo(key);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, int&gt;</returns>
        public GhostNetwork.Reactions.Client.ApiResponse< Dictionary<string, int> > ReactionsGetWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'key' when calling ReactionsApi->ReactionsGet");

            GhostNetwork.Reactions.Client.RequestOptions localVarRequestOptions = new GhostNetwork.Reactions.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GhostNetwork.Reactions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GhostNetwork.Reactions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< Dictionary<string, int> >("/Reactions/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReactionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of Dictionary&lt;string, int&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, int>> ReactionsGetAsync (string key)
        {
             GhostNetwork.Reactions.Client.ApiResponse<Dictionary<string, int>> localVarResponse = await ReactionsGetAsyncWithHttpInfo(key);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, int&gt;)</returns>
        public async System.Threading.Tasks.Task<GhostNetwork.Reactions.Client.ApiResponse<Dictionary<string, int>>> ReactionsGetAsyncWithHttpInfo (string key)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'key' when calling ReactionsApi->ReactionsGet");


            GhostNetwork.Reactions.Client.RequestOptions localVarRequestOptions = new GhostNetwork.Reactions.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(key)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, int>>("/Reactions/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReactionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="author"></param>
        /// <returns>Reaction</returns>
        public Reaction ReactionsGetReactionByAuthor (string key, string author)
        {
             GhostNetwork.Reactions.Client.ApiResponse<Reaction> localVarResponse = ReactionsGetReactionByAuthorWithHttpInfo(key, author);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="author"></param>
        /// <returns>ApiResponse of Reaction</returns>
        public GhostNetwork.Reactions.Client.ApiResponse< Reaction > ReactionsGetReactionByAuthorWithHttpInfo (string key, string author)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'key' when calling ReactionsApi->ReactionsGetReactionByAuthor");

            // verify the required parameter 'author' is set
            if (author == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'author' when calling ReactionsApi->ReactionsGetReactionByAuthor");

            GhostNetwork.Reactions.Client.RequestOptions localVarRequestOptions = new GhostNetwork.Reactions.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GhostNetwork.Reactions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GhostNetwork.Reactions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("author", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(author)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< Reaction >("/Reactions/{key}/author", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReactionsGetReactionByAuthor", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="author"></param>
        /// <returns>Task of Reaction</returns>
        public async System.Threading.Tasks.Task<Reaction> ReactionsGetReactionByAuthorAsync (string key, string author)
        {
             GhostNetwork.Reactions.Client.ApiResponse<Reaction> localVarResponse = await ReactionsGetReactionByAuthorAsyncWithHttpInfo(key, author);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="author"></param>
        /// <returns>Task of ApiResponse (Reaction)</returns>
        public async System.Threading.Tasks.Task<GhostNetwork.Reactions.Client.ApiResponse<Reaction>> ReactionsGetReactionByAuthorAsyncWithHttpInfo (string key, string author)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'key' when calling ReactionsApi->ReactionsGetReactionByAuthor");

            // verify the required parameter 'author' is set
            if (author == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'author' when calling ReactionsApi->ReactionsGetReactionByAuthor");


            GhostNetwork.Reactions.Client.RequestOptions localVarRequestOptions = new GhostNetwork.Reactions.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("author", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(author)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Reaction>("/Reactions/{key}/author", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReactionsGetReactionByAuthor", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="author"></param>
        /// <returns>Dictionary&lt;string, int&gt;</returns>
        public Dictionary<string, int> ReactionsUpdate (string key, string type, string author)
        {
             GhostNetwork.Reactions.Client.ApiResponse<Dictionary<string, int>> localVarResponse = ReactionsUpdateWithHttpInfo(key, type, author);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="author"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, int&gt;</returns>
        public GhostNetwork.Reactions.Client.ApiResponse< Dictionary<string, int> > ReactionsUpdateWithHttpInfo (string key, string type, string author)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'key' when calling ReactionsApi->ReactionsUpdate");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'type' when calling ReactionsApi->ReactionsUpdate");

            // verify the required parameter 'author' is set
            if (author == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'author' when calling ReactionsApi->ReactionsUpdate");

            GhostNetwork.Reactions.Client.RequestOptions localVarRequestOptions = new GhostNetwork.Reactions.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GhostNetwork.Reactions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = GhostNetwork.Reactions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("key", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("author", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(author)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Put< Dictionary<string, int> >("/Reactions/{key}/{type}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReactionsUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="author"></param>
        /// <returns>Task of Dictionary&lt;string, int&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, int>> ReactionsUpdateAsync (string key, string type, string author)
        {
             GhostNetwork.Reactions.Client.ApiResponse<Dictionary<string, int>> localVarResponse = await ReactionsUpdateAsyncWithHttpInfo(key, type, author);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GhostNetwork.Reactions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key"></param>
        /// <param name="type"></param>
        /// <param name="author"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, int&gt;)</returns>
        public async System.Threading.Tasks.Task<GhostNetwork.Reactions.Client.ApiResponse<Dictionary<string, int>>> ReactionsUpdateAsyncWithHttpInfo (string key, string type, string author)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'key' when calling ReactionsApi->ReactionsUpdate");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'type' when calling ReactionsApi->ReactionsUpdate");

            // verify the required parameter 'author' is set
            if (author == null)
                throw new GhostNetwork.Reactions.Client.ApiException(400, "Missing required parameter 'author' when calling ReactionsApi->ReactionsUpdate");


            GhostNetwork.Reactions.Client.RequestOptions localVarRequestOptions = new GhostNetwork.Reactions.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("key", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.PathParameters.Add("type", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(type)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("author", GhostNetwork.Reactions.Client.ClientUtils.ParameterToString(author)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Dictionary<string, int>>("/Reactions/{key}/{type}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReactionsUpdate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
